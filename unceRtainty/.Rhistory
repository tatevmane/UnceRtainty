df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
arrange(desc(count))
# Create a bar plot of the prevalence of each bacterial isolate in 2023
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Count") +
theme_minimal()
# Create a bar plot of the prevalence of each bacterial isolate in 2023
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -count), y = count)) +
geom_bar(stat = "identity") +
labs(title = "Prevalence of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Count") +
theme_minimal()
# Create a bar plot of the prevalence of each bacterial isolate in 2023
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Count") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
# Create a bar plot of the proportions of each bacterial isolate in 2023
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
# by year
# Count the proportion of each bacterial isolate by year
species_counts_by_year <- df_long %>%
group_by(Year, Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
# Create a bar plot of the prevalence of each bacterial isolate by year
ggplot(species_counts_by_year, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates by Year", x = "Bacterial Species", y = "Count", fill = "Year") +
theme_minimal()
# by year
# Count the proportion of each bacterial isolate by year
species_counts_by_year <- df_long %>%
group_by(Year, Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
# Create a bar plot of the prevalence of each bacterial isolate by year
ggplot(species_counts_by_year, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates by Year", x = "Bacterial Species", y = "Proportion", fill = "Year") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(species, -proportion), y = proportion, fill = species)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = species)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = scales::percent(proportion, accuracy = 0.1)),
hjust = -0.1, size = 3) +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = scales::percent(proportion, accuracy = 0.1)),
hjust = -0.1, size = 3) +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal() +
ggsave("plot.png", width = 10, height = 6)  # Adjust width and height as needed
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = scales::percent(proportion, accuracy = 0.1)),
hjust = -0.1, size = 3) +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE)
options(warn = -1) # Suppress warnings
options(message = FALSE) # Suppress messages
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
library(purrr)
library(stringr)
setwd("/Users/tatevgomtsyan/TB_Research")
# code to obtain full_sputum df
#results_23 <- read_csv("2023_results.csv")
#results_22 <- read_csv("2022_results.csv")
#results_21 <- read_csv("2021_results.csv")
#results_20 <- read_csv("2020_copy.csv")
#results_19 <- read_csv("2019_copy.csv")
#results_18 <- read_csv("2018_copy.csv")
#full_results <- list(results_23, results_22, results_21, results_20, results_19)
# Perform full join on all data frames
#df <- reduce(full_results, full_join)
#df <- subset(df, Growth != "None")
#colnames(df)
#df <-df[, -8]
# Using add_column()
#df <- df %>%
# add_column(Sample_type = "Sputum")
#df
# changed column names
#df <- df %>%
#  rename(
#   "PID"= "PID",
#  "Patient"= "Patient",
# "Sex" = "Sex",
#"Age" = "Age",
#"Sample_collection_date" = "Sample Taken",
#"Test"='Test (both isoalate and drugs)',
#  "DST_result" = "(DST results)",
# "Bacterial_isolate" = "Growth",
#"Stain_result"="StainResult"
df <- read_csv("full_sputum.csv")
# if text in dst_result not na, fill dst with 1. otherwise, 0.
df <- df %>%
mutate(DST = if_else(is.na(DST_result), 0, 1))
# Creating a new column based on conditions in the Bacterial_isolate column
df <- df %>%
mutate(Stain_result = ifelse(grepl("staph|strep", Bacterial_isolate, ignore.case = TRUE), "positive", "negative"))
# Drop rows where Test column contains "Organism Isolated"
df <- df %>%
filter(!str_detect(Test, "Organism Isolated"))
# Convert DST_result column to lowercase
df <- df %>%
mutate(DST_result = tolower(DST_result))
# Convert 'none' to NA in the DST_result column
df <- df %>%
mutate(DST_result = ifelse(DST_result == "none", NA, DST_result))
# Function to extract and normalize antibiotics
extract_antibiotics <- function(dst_column) {
if (!is.na(dst_column)) {
# Split on comma or comma followed by a space
antibiotics <- unlist(strsplit(dst_column, ",\\s*"))
antibiotics <- trimws(tolower(antibiotics))  # Convert to lowercase
antibiotics <- antibiotics[antibiotics != ""] # Remove any empty antibiotic names
return(unique(antibiotics))
} else {
return(character(0))
}
}
# Define criteria for antibiotics
criteria <- c(
"Resistant to" = 1,
"Intermediate to" = 2,
"Sensitive to" = 3
)
# Function to map criteria to resistance types based on Word column
map_to_criteria <- function(word_column) {
word_column <- tolower(word_column)
ifelse(str_detect(word_column, "resistant"), 1,
ifelse(str_detect(word_column, "intermediate"), 2,
ifelse(str_detect(word_column, "sensitive"), 3, 0)))
}
# Map criteria to resistance types based on Word column
df <- df %>%
mutate(Test = map_to_criteria(Test))
# Get unique antibiotics
unique_antibiotics <- df %>%
filter(Test != 0) %>%
pull(DST_result) %>%
map(extract_antibiotics) %>%
unlist() %>%
unique() %>%
sort()
# Create antibiotic columns, ensuring no empty names are created
for (antibiotic in unique_antibiotics) {
if (antibiotic != "") {
df[[antibiotic]] <- 0
}
}
# Fill antibiotic columns based on criteria
fill_antibiotics <- function(df, unique_antibiotics) {
for (i in 1:nrow(df)) {
if (df$Test[i] != 0) {
antibiotics <- extract_antibiotics(df$DST_result[i])
for (antibiotic in antibiotics) {
df[i, antibiotic] <- df$Test[i]
}
}
}
return(df)
}
# Fill antibiotic columns
df <- fill_antibiotics(df, unique_antibiotics)
# Drop the Test column
df <- df %>%
select(-Test)
# Aggregate to one row per patient
df_long <- df %>%
group_by(PID, Patient, Sex, Age, `Sample_collection_date`, Year, Bacterial_isolate, Sample_type, Stain_result) %>%
summarize(across(all_of(unique_antibiotics), ~ max(.x, na.rm = TRUE)), .groups = 'drop')
#write.csv(df, file="full_sputum.csv", row.names=FALSE)
#checking for duplicates
df_long[duplicated(df_long), ]
# Define a function to standardize the names
standardize_name <- function(name) {
name <- tolower(name) # Convert to lowercase
name <- trimws(name) # Trim whitespace
name <- gsub("staphylococci species|staphylococcus spp", "staphylococcus species", name) # Standardize staph species
name <- gsub("pseudomonas aeroginosa", "pseudomonas aeruginosa", name) # Correct aeroginosa spelling
return(name)
}
# Apply the function to the 'species' column in the data frame
df_long$Bacterial_isolate <- sapply(df_long$Bacterial_isolate, standardize_name)
# standardize all bacterial isolate names
unique(df_long['Bacterial_isolate'])
colnames(df_long)
# Count the number of each bacterial isolate
species_counts <- df_long %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
arrange(desc(count))
# Create a bar plot of the prevalence of each bacterial isolate
ggplot(species_counts, aes(x = reorder(Bacterial_isolate, -count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates", x = "Bacterial Species", y = "Count") +
theme_minimal()
# by year
# Count the proportion of each bacterial isolate by year
species_counts_by_year <- df_long %>%
group_by(Year, Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
# Create a bar plot of the prevalence of each bacterial isolate by year
ggplot(species_counts_by_year, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates by Year", x = "Bacterial Species", y = "Proportion", fill = "Year") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = scales::percent(proportion, accuracy = 0.1)),
hjust = -0.1, size = 3) +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
View(df_long)
write.csv(df_long, file="long_format_sputum.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = FALSE)
options(warn = -1) # Suppress warnings
options(message = FALSE) # Suppress messages
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
library(purrr)
library(stringr)
setwd("/Users/tatevgomtsyan/TB_Research")
# code to obtain full_sputum df
#results_23 <- read_csv("2023_results.csv")
#results_22 <- read_csv("2022_results.csv")
#results_21 <- read_csv("2021_results.csv")
#results_20 <- read_csv("2020_copy.csv")
#results_19 <- read_csv("2019_copy.csv")
#results_18 <- read_csv("2018_copy.csv")
#full_results <- list(results_23, results_22, results_21, results_20, results_19)
# Perform full join on all data frames
#df <- reduce(full_results, full_join)
#df <- subset(df, Growth != "None")
#colnames(df)
#df <-df[, -8]
# Using add_column()
#df <- df %>%
# add_column(Sample_type = "Sputum")
#df
# changed column names
#df <- df %>%
#  rename(
#   "PID"= "PID",
#  "Patient"= "Patient",
# "Sex" = "Sex",
#"Age" = "Age",
#"Sample_collection_date" = "Sample Taken",
#"Test"='Test (both isoalate and drugs)',
#  "DST_result" = "(DST results)",
# "Bacterial_isolate" = "Growth",
#"Stain_result"="StainResult"
df <- read_csv("full_sputum.csv")
# if text in dst_result not na, fill dst with 1. otherwise, 0.
df <- df %>%
mutate(DST = if_else(is.na(DST_result), 0, 1))
# Creating a new column based on conditions in the Bacterial_isolate column
df <- df %>%
mutate(Stain_result = ifelse(grepl("staph|strep", Bacterial_isolate, ignore.case = TRUE), "positive", "negative"))
# Drop rows where Test column contains "Organism Isolated"
df <- df %>%
filter(!str_detect(Test, "Organism Isolated"))
# Convert DST_result column to lowercase
df <- df %>%
mutate(DST_result = tolower(DST_result))
# Convert 'none' to NA in the DST_result column
df <- df %>%
mutate(DST_result = ifelse(DST_result == "none", NA, DST_result))
# Function to extract and normalize antibiotics
extract_antibiotics <- function(dst_column) {
if (!is.na(dst_column)) {
# Split on comma or comma followed by a space
antibiotics <- unlist(strsplit(dst_column, ",\\s*"))
antibiotics <- trimws(tolower(antibiotics))  # Convert to lowercase
antibiotics <- antibiotics[antibiotics != ""] # Remove any empty antibiotic names
return(unique(antibiotics))
} else {
return(character(0))
}
}
# Define criteria for antibiotics
criteria <- c(
"Resistant to" = 1,
"Intermediate to" = 2,
"Sensitive to" = 3
)
# Function to map criteria to resistance types based on Word column
map_to_criteria <- function(word_column) {
word_column <- tolower(word_column)
ifelse(str_detect(word_column, "resistant"), 1,
ifelse(str_detect(word_column, "intermediate"), 2,
ifelse(str_detect(word_column, "sensitive"), 3, 0)))
}
# Map criteria to resistance types based on Word column
df <- df %>%
mutate(Test = map_to_criteria(Test))
# Get unique antibiotics
unique_antibiotics <- df %>%
filter(Test != 0) %>%
pull(DST_result) %>%
map(extract_antibiotics) %>%
unlist() %>%
unique() %>%
sort()
# Create antibiotic columns, ensuring no empty names are created
for (antibiotic in unique_antibiotics) {
if (antibiotic != "") {
df[[antibiotic]] <- 0
}
}
# Fill antibiotic columns based on criteria
fill_antibiotics <- function(df, unique_antibiotics) {
for (i in 1:nrow(df)) {
if (df$Test[i] != 0) {
antibiotics <- extract_antibiotics(df$DST_result[i])
for (antibiotic in antibiotics) {
df[i, antibiotic] <- df$Test[i]
}
}
}
return(df)
}
# Fill antibiotic columns
df <- fill_antibiotics(df, unique_antibiotics)
# Drop the Test column
df <- df %>%
select(-Test)
# Aggregate to one row per patient
df_long <- df %>%
group_by(PID, Patient, Sex, Age, `Sample_collection_date`, Year, Bacterial_isolate, Sample_type, Stain_result) %>%
summarize(across(all_of(unique_antibiotics), ~ max(.x, na.rm = TRUE)), .groups = 'drop')
# for saving df as csv if changes are made
#write.csv(df_long, file="long_format_sputum.csv", row.names=FALSE)
#checking for duplicates
df_long[duplicated(df_long), ]
# Define a function to standardize the names
standardize_name <- function(name) {
name <- tolower(name) # Convert to lowercase
name <- trimws(name) # Trim whitespace
name <- gsub("staphylococci species|staphylococcus spp", "staphylococcus species", name) # Standardize staph species
name <- gsub("pseudomonas aeroginosa", "pseudomonas aeruginosa", name) # Correct aeroginosa spelling
return(name)
}
# Apply the function to the 'species' column in the data frame
df_long$Bacterial_isolate <- sapply(df_long$Bacterial_isolate, standardize_name)
# standardize all bacterial isolate names
unique(df_long['Bacterial_isolate'])
colnames(df_long)
# Count the number of each bacterial isolate
species_counts <- df_long %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
arrange(desc(count))
# Create a bar plot of the prevalence of each bacterial isolate
ggplot(species_counts, aes(x = reorder(Bacterial_isolate, -count), y = count)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates", x = "Bacterial Species", y = "Count") +
theme_minimal()
# by year
# Count the proportion of each bacterial isolate by year
species_counts_by_year <- df_long %>%
group_by(Year, Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
# Create a bar plot of the prevalence of each bacterial isolate by year
ggplot(species_counts_by_year, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(title = "Prevalence of Bacterial Isolates by Year", x = "Bacterial Species", y = "Proportion", fill = "Year") +
theme_minimal()
# Filter the data for the year 2023
df_2023 <- df_long %>%
filter(Year == 2023)
# Count the number of each bacterial isolate in 2023 and calculate proportions
species_counts_2023 <- df_2023 %>%
group_by(Bacterial_isolate) %>%
summarize(count = n()) %>%
mutate(proportion = count / sum(count)) %>%
arrange(desc(proportion))
ggplot(species_counts_2023, aes(x = reorder(Bacterial_isolate, -proportion), y = proportion, fill = Bacterial_isolate)) +
geom_bar(stat = "identity") +
coord_flip() +
geom_text(aes(label = scales::percent(proportion, accuracy = 0.1)),
hjust = -0.1, size = 3) +
labs(title = "Proportion of Bacterial Isolates in 2023", x = "Bacterial Species", y = "Proportion") +
theme_minimal()
View(df)
View(extract_antibiotics)
View(fill_antibiotics)
View(map_to_criteria)
View(extract_antibiotics)
